03. 함수와 메서드
객체 지향 프로그램을 할 떄는?
객체를 정의 하고 / 각 개체의 속성을 멤버 변수로 역할을 메서드로 구현하고 /
각 객체간의 협력을 구현합니다.

클래스 코딩하기!
클래스는 대문자로 시작하는 것이 좋음 / java 파일 하나에 클래스는 여러 개가 있을 수 있지만, public 클래스는 하나이고, public 클래스와 .java 파일의 이름은 동일함
camel notation 방식으로 명명

함수(function)
하나의 기능을 수행하는 일련의 코드
구현된(정의된) 함수는 호출하여 사용하고 호출된 함수는 기능이 끝나면 제어가 반환됨.
함수로 구현된 하나의 기능은 여러 곳에서 동일한 방식으로 호출되어 사용할 수 있음.
함수의 구성 : 함수의 이름 / 매개 변수 / 반환 값(void, int, ~) / 함수 몸체(body)

함수 호출과 스택 메모리
- 스택 : 함수가 호출될 때 지역 변수들이 사용하는 메모리
- 함수의 수행이 끝나면 자동으로 반환 되는 메모리

지역 변수 : 블럭 안에서 정의되는 변수

-----

04. 객체의 속성은 멤버 변수로, 객체의 기능은 메서드로 구현한다.

메서드(method) : 객체의 기능을 구현하기 위해 클래스 내부에 구현되는 함수
멤버 함수(member function)이라고도 함.
메서드를 구현함으로써 객체의 기능이 구현됨.
메서드의 이름은 그 객체를 사용하는 객체(클라이언트)에 맞게 짓는 것이 좋음.
ex) getStudentName()

-----

05. 인스턴스 생성과 힙 메모리(heap memory)

- 인스턴스(instance)
클래스는 객체의 속성을 정의하고, 기능을 구현하여 만들어 놓은 코드 상태.
실제 클래스 기반으로 생성된 객체(인스턴스)는 각각 다른 멤버 변수 값을 가지게 됨.
new 키워드를 사용하여 인스턴스 생성

- 힙 메모리
생성된 인스턴스는 동적 메모리(heap memory)에 할당됨.
C나 C++ 언어에서는 사용한 동적 메모리를 프로그래머가 해제 시켜야 함(free나 delete)
자바에서는 Gabage Collector가 주기적으로 사용하지 않는 메모리를 수거.
하나의 클래스로부터 여러개의 인스턴스가 생성되고, 각각 다른 메모리 주소를 갖게 됨.

클래스 : 객체를 프로그래밍 하기 위해 코드로 정의해 놓은 상태.
객체 : 객체 지향 프로그램의 대상, 생성된 인스턴스.
인스턴스 : new 키워드를 사용하여 클래스를 메모리에 생성한 상태.
멤버 변수 : 클래스의 속성, 특성
메서드 : 멤버 변수를 이용하여 클래스의 기능을 구현한 함수
참조 변수 : 메모리에 생성된 인스턴스를 가리키는 변수(스택 영역)
참조 값 : 생성된 인스턴스의 메모리 주소 값(힙 영역)

06. 생성자(constructor)에 대해 알아봅시다
생성자
생성자는 반환 값이 없고, 클래스의 이름과 동일
객체를 생성하기 위해 new 키워드와 함께 사용.
-> Student st1 = new Student();
객체가 생성될 떄 변수나 상수를 초기화 하거나 다른 초기화 기능을 수행하는 메서드를 호출함.
대부분의 생성자는 외부에서 접근 가능하지만, 필요에 의해 private으로 선언되는 경우도 있음.

기본 생성자(default constructor)
클래스에는 반드시 적어도 하나 이상의 생성자가 존재
생성자를 구현하지 않아도 new 키워드와 함꼐 생성자를 호출할 수 있음.
클래스에 생성자가 하나도 없는 경우 컴파일러가 생성자 코드를 넣어 줌.
-> public Student(){}

07. 여러가지 생성자를 정의하는 생성자 오버로딩(overloading)
생성자 정의하기
- 생성자를 구현해서 사용할 수 있음.
- 클래스에서 생성자를 따로 구현하면 기본 생성자(default constructor)는 제공되지 않음.
- 생성자를 호출하는 코드(client 코드)에서 여러 생성자 중 필요에 따라 호출해서 사용할 수 있음.